openapi: 3.0.3
info:
  title: Varuna Docs
  description: PI Project
  version: 1.0.0
servers:
- url: https://localhost:8080
tags:
- name: Users
  description: App users
- name: Document
paths:
  /login:
    post:
      tags:
      - Users
      description: Login
      requestBody:
        description: "Fields for logging in, returns session token"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginReq"
        required: true
      responses:
        "200":
          description: "Successfully authenticated, returns a JWT token."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResp"
        "400":
          description: Bad request. All fields are required.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_400"
        "401":
          description: Unauthorized. Invalid username or password.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_401"
        "500":
          description: Internal server error. Something went wrong while generating
            the token or logging in.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_500"
  /refresh:
    post:
      tags:
      - Users
      description: Use refresh token to get new access token
      requestBody:
        description: "Fields for logging in, returns session token"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefreshReq"
        required: true
      responses:
        "200":
          description: "Successfully authenticated, returns a JWT token."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResp"
        "400":
          description: Bad request. All fields are required.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_400"
        "401":
          description: Unauthorized. Invalid username or password.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_401"
        "500":
          description: Internal server error. Something went wrong while generating
            the token or logging in.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_500"
  /users:
    get:
      tags:
      - Users
      description: List all users except the one making the request
      operationId: listUsers
      parameters:
      - name: page
        in: query
        description: The page number to retrieve.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 1
      - name: size
        in: query
        description: The number of users to retrieve per page.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      responses:
        "200":
          description: List of users.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserPublic"
    post:
      tags:
      - Users
      description: Create Users. Only an admin may create a user for a new employee
      operationId: createUsers
      requestBody:
        description: Fields for creating a new user
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterReq"
        required: true
      responses:
        "201":
          description: "User successfully created, returns a JWT token."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_201"
        "400":
          description: Bad request. Either a field is missing or invalid format.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_400_1"
        "500":
          description: Internal server error. Failed to process password or generate
            token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_500_1"
  /roles/{role}/users:
    get:
      tags:
      - Users
      description: List all users except the one making the request that have the
        specified role
      operationId: listUsersByRole
      parameters:
      - name: role
        in: path
        description: User role
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: page
        in: query
        description: The page number to retrieve.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 1
      - name: size
        in: query
        description: The number of users to retrieve per page.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      responses:
        "200":
          description: List of users.
          content:
            application/json:
              schema:
                type: array
                example:
                - ask38
                - dlc4
                - aic1
                items:
                  type: string
                x-content-type: application/json
  /users/{username}:
    get:
      tags:
      - Users
      description: Primarily used to obtain the public key and share a doc
      operationId: getUserByName
      parameters:
      - name: username
        in: path
        description: 'The name that needs to be fetched. Use Users1 for testing. '
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserPublic"
        "404":
          description: Users not found
  /users/{username}/creds:
    put:
      tags:
      - Users
      description: Change user credentials
      operationId: updateUser
      parameters:
      - name: username
        in: path
        description: 'The name that needs to be fetched. Use Users1 for testing. '
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Fields for creating a new user
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginChangeReq"
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserPublic"
        "404":
          description: Users not found
  /docs/{docId}:
    get:
      tags:
      - Document
      description: Get doc info. Must have appropriate roles or user log in to access.
      operationId: getDocument
      parameters:
      - name: docId
        in: path
        description: The doc that needs to be fetched.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Document"
        "404":
          description: Document not found
      security:
      - token: []
  /docs/{docId}/download:
    get:
      tags:
      - Document
      description: Download a doc if the user role matches the doc permissions. Must
        have appropriate roles or user log in to access.
      operationId: downloadDocument
      parameters:
      - name: docId
        in: path
        description: The doc that needs to be fetched.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
                x-content-type: application/octet-stream
        "404":
          description: Document not found
      security:
      - token: []
  /docs/upload:
    post:
      tags:
      - Document
      description: Upload a doc to your account
      operationId: uploadDocument
      parameters:
      - name: docName
        in: query
        description: Name of the doc to display in the app
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: X-Hash
        in: header
        description: Hash value of the original doc to verify integrity
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/docs_upload_body"
        required: true
      responses:
        "200":
          description: Document uploaded successfully
        "400":
          description: Bad Request
      security:
      - token: []
  /docs/{docId}/perms:
    get:
      tags:
      - Document
      description: Get doc permissions
      operationId: getDocPermissions
      parameters:
      - name: docId
        in: path
        description: Identifier of the doc
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SharePermissions"
      security:
      - token: []
    put:
      tags:
      - Document
      description: Change doc permissions
      operationId: changeDocPermissions
      parameters:
      - name: docId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SharePermissions"
        required: true
      responses:
        "200":
          description: Document permissions changed successfully
        "400":
          description: Bad Request
      security:
      - token: []
  /docs/{docId}/delete:
    delete:
      tags:
      - Document
      description: Only the owner may perform this action on a document
      operationId: deleteDocument
      parameters:
      - name: docId
        in: path
        description: Identifier of the doc to delete
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Deleted
        "401":
          description: Unauthorized
        "404":
          description: Document not found
      security:
      - token: []
  /roles/{role}/docs:
    get:
      tags:
      - Document
      description: List the docs of a specific role
      operationId: listRoleDocuments
      parameters:
      - name: role
        in: path
        description: Docs accessible by a certain role
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: page
        in: query
        description: The page number to retrieve.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 1
      - name: size
        in: query
        description: The number of users to retrieve per page.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 10
      responses:
        "200":
          description: successful operation
          headers:
            X-Total-Pages:
              description: Total number of pages available
              style: simple
              explode: false
              schema:
                type: integer
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Document"
                x-content-type: application/json
      security:
      - token: []
components:
  schemas:
    UserPublic:
      type: object
      properties:
        username:
          type: string
          example: ask38
        roles:
          type: array
          example:
          - admin
          - apps
          items:
            type: string
      example:
        roles:
        - admin
        - apps
        username: ask38
    RegisterReq:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
        username:
          type: string
    LoginChangeReq:
      type: object
      properties:
        prev-password:
          type: string
        new-password:
          type: string
    Document:
      type: object
      properties:
        docId:
          type: integer
          format: int64
        docName:
          type: string
        hash:
          type: string
        description:
          type: string
        creationDate:
          type: string
        permissions:
          $ref: "#/components/schemas/SharePermissions"
      example:
        docName: docName
        docId: 0
        permissions:
          roles:
          - qa
          - apps
          users:
          - pmi4
        description: description
        creationDate: creationDate
        hash: hash
    LoginReq:
      required:
      - password
      - username
      type: object
      properties:
        username:
          type: string
          example: momazos_diego
        password:
          type: string
          format: password
          example: pass1234
    LoginResp:
      required:
      - token
      type: object
      properties:
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        refresh-token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
      example:
        refresh-token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
    RefreshReq:
      required:
      - password
      - username
      type: object
      properties:
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
    SharePermissions:
      required:
      - encAes
      - username
      type: object
      properties:
        roles:
          type: array
          example:
          - qa
          - apps
          items:
            type: string
        users:
          type: array
          example:
          - pmi4
          items:
            type: string
      example:
        roles:
        - qa
        - apps
        users:
        - pmi4
    inline_response_400:
      type: object
      properties:
        message:
          type: string
          example: All fields are required.
    inline_response_401:
      type: object
      properties:
        message:
          type: string
          example: Invalid username or password.
    inline_response_500:
      type: object
      properties:
        message:
          type: string
          example: Internal server error.
    inline_response_201:
      type: object
      properties:
        message:
          type: string
          example: User created successfully
      example:
        message: User created successfully
    inline_response_400_1:
      type: object
      properties:
        message:
          type: string
          example: Invalid email format
    inline_response_500_1:
      type: object
      properties:
        message:
          type: string
          example: Error processing password
    docs_upload_body:
      type: object
      properties:
        doc:
          type: string
          description: The doc to upload.
          format: binary
  securitySchemes:
    token:
      type: http
      scheme: bearer
      bearerFormat: JWT
